{"version":3,"sources":["redux/types.js","redux/postsReducer.js","redux/appReducer.js","redux/rootReducer.js","redux/actions.js","components/alert.js","components/PostForm.js","components/Post.js","components/Posts.js","components/Loader.js","components/FetchedPosts.js","App.js","serviceWorker.js","redux/middleware.js","index.js"],"names":["CREATE_POST","initialState","posts","fetchedPosts","loading","alert","rootReducer","combineReducers","state","action","type","payload","app","showAlert","text","className","dispatch","setTimeout","hideAlert","Alert","role","PostForm","props","submitHandler","event","preventDefault","title","trim","newPost","id","Date","now","toString","createPost","setState","changeInputHandler","target","name","value","prevState","onSubmit","this","htmlFor","onChange","Component","mapDispatchToProps","post","connect","Post","syncPosts","length","map","key","Loader","FetchedPosts","useDispatch","useSelector","onClick","a","fetch","response","json","App","Boolean","window","location","hostname","match","forbidden","store","createStore","compose","applyMiddleware","thunk","next","filter","word","includes","__REDUX_DEVTOOLS_EXTENSION__","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c86e8359.chunk.js","sourcesContent":["export const CREATE_POST = 'rrs/post/CREATE_POST'\nexport const FETCH_POSTS = 'rrs/post/FETCH_POSTS'\nexport const SHOW_LOADER = 'rrs/app/SHOW_LOADER'\nexport const HIDE_LOADER = 'rrs/app/HIDE_LOADER'\nexport const SHOW_ALERT = 'rrs/app/SHOW_ALERT'\nexport const HIDE_ALERT = 'rrs/app/HIDE_ALERT'\n","import { CREATE_POST, FETCH_POSTS } from './types'\n\nconst initialState = {\n  posts: [],\n  fetchedPosts: [],\n}\n\n// Pure Functions\nexport const postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_POST:\n      return {\n        ...state,\n        posts: [...state.posts, action.payload],\n      }\n    case FETCH_POSTS:\n      return {\n        ...state,\n        fetchedPosts: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import { HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER } from './types'\n\nconst initialState = {\n  loading: false,\n  alert: null,\n}\n\nexport const appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SHOW_LOADER:\n      return {\n        ...state,\n        loading: true,\n      }\n    case HIDE_LOADER:\n      return {\n        ...state,\n        loading: false,\n      }\n    case SHOW_ALERT:\n      return {\n        ...state,\n        alert: action.payload,\n      }\n    case HIDE_ALERT:\n      return {\n        ...state,\n        alert: null,\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { postsReducer } from './postsReducer'\nimport { appReducer } from './appReducer'\n\nexport const rootReducer = combineReducers({\n  posts: postsReducer,\n  app: appReducer,\n})\n","import {\n  CREATE_POST,\n  FETCH_POSTS,\n  HIDE_ALERT,\n  HIDE_LOADER,\n  SHOW_ALERT,\n  SHOW_LOADER,\n} from './types'\n\nexport const createPost = (post) => ({\n  type: CREATE_POST,\n  payload: post,\n})\n\nexport const showLoader = () => ({ type: SHOW_LOADER })\nexport const hideLoader = () => ({ type: HIDE_LOADER })\n\nexport const showAlert = (text, className) => {\n  return (dispatch) => {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: {\n        text,\n        className,\n      },\n    })\n\n    setTimeout(() => {\n      dispatch(hideAlert())\n    }, 3000)\n  }\n}\nexport const hideAlert = () => ({ type: HIDE_ALERT })\n\nexport const fetchPosts = () => {\n  return async (dispatch) => {\n    try {\n      dispatch(showLoader())\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/posts?_limit=5'\n      )\n      const json = await response.json()\n      dispatch({ type: FETCH_POSTS, payload: json })\n      dispatch(hideLoader())\n    } catch (error) {\n      dispatch(showAlert('Что-то пошло не так', 'danger'))\n      dispatch(hideLoader())\n    }\n  }\n}\n","import React from 'react'\n\nconst Alert = ({ text, className }) => {\n  return (\n    <div className={`alert alert-${className}`} role=\"alert\">\n      {text}\n    </div>\n  )\n}\n\nexport default Alert\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { createPost, hideAlert, showAlert } from '../redux/actions'\nimport Alert from './alert'\n\nclass PostForm extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      title: '',\n    }\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault()\n\n    const { title } = this.state\n\n    if (!title.trim()) {\n      return this.props.showAlert(\n        'Название поста не может быть пустым',\n        'warning'\n      )\n    }\n\n    const newPost = {\n      title,\n      id: Date.now().toString(),\n    }\n\n    this.props.createPost(newPost)\n    // this.props.hideAlert()\n    this.setState({ title: '' })\n  }\n\n  changeInputHandler = (event) => {\n    const { name, value } = event.target\n    this.setState((prevState) => ({ ...prevState, ...{ [name]: value } }))\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submitHandler}>\n        {this.props.alert && (\n          <Alert\n            text={this.props.alert.text}\n            className={this.props.alert.className}\n          />\n        )}\n\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Заголовок поста</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"title\"\n            value={this.state.title}\n            name=\"title\"\n            onChange={this.changeInputHandler}\n          />\n        </div>\n        <button className=\"btn btn-success\" type=\"submit\">\n          Создать\n        </button>\n      </form>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  alert: state.app.alert,\n})\n\nconst mapDispatchToProps = {\n  createPost,\n  showAlert,\n  hideAlert,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm)\n","import React from 'react'\n\nfunction Post({ post }) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{post.title}</h5>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Post from './Post'\n\nconst Posts = ({ syncPosts }) => {\n  if (!syncPosts.length) {\n    return <h6 className=\"text-center\">Постов пока нет</h6>\n  }\n  return syncPosts.map((post) => <Post post={post} key={post.id} />)\n}\n\nconst mapStateToProps = (state) => ({\n  syncPosts: state.posts.posts,\n})\n\nexport default connect(mapStateToProps)(Posts)\n","import React from 'react'\n\nconst Loader = () => {\n  return (\n    <div className=\"spinner-border text-primary\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  )\n}\n\nexport default Loader\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Post from './Post'\nimport { fetchPosts } from '../redux/actions'\nimport Loader from './Loader'\n\nconst FetchedPosts = () => {\n  const dispatch = useDispatch()\n  const posts = useSelector((state) => state.posts.fetchedPosts)\n  const loading = useSelector((state) => state.app.loading)\n\n  if (loading) {\n    return <Loader />\n  }\n\n  if (!posts.length) {\n    return (\n      <button\n        className=\"btn btn-primary\"\n        onClick={() => dispatch(fetchPosts())}\n      >\n        Загрузить\n      </button>\n    )\n  }\n  return posts.map((post) => <Post post={post} key={post.id} />)\n}\n\nexport default FetchedPosts\n","import React from 'react'\nimport PostForm from './components/PostForm'\nimport Posts from './components/Posts'\nimport FetchedPosts from './components/FetchedPosts'\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Синхнонные посты</h2>\n          <Posts />\n        </div>\n        <div className=\"col\">\n          <h2>Асинхнонные посты</h2>\n          <FetchedPosts />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CREATE_POST } from './types'\nimport { showAlert } from './actions'\n\nconst forbidden = ['fuck', 'span', 'php']\n\nexport const forbiddenWordsMiddleware = ({ dispatch }) => (next) => (\n  action\n) => {\n  if (action.type === CREATE_POST) {\n    const found = forbidden.filter((word) =>\n      action.payload.title.includes(word)\n    )\n    if (found.length) {\n      return dispatch(showAlert('Вы спамер, идите домой', 'dark'))\n    }\n  }\n  return next(action)\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, compose, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { rootReducer } from './redux/rootReducer'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { forbiddenWordsMiddleware } from './redux/middleware'\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk, forbiddenWordsMiddleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n)\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}